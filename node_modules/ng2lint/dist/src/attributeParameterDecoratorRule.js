"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var parameterConstructorBase_1 = require("./parameterConstructorBase");
var decoratorValidator_1 = require("./util/decoratorValidator");
var FAILURE_STRING = 'In the constructor of class "%s", the parameter "%s" uses the @Attribute decorator, ' +
    'which is considered as a bad practice. Please, consider construction of type "@Input() %s: string"';
var attributeCondition = function (name) {
    return (name == 'Attribute');
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule(ruleName, value, disabledIntervals) {
        _super.call(this, ruleName, value, disabledIntervals, decoratorValidator_1.decoratorValidator(attributeCondition), FAILURE_STRING);
    }
    return Rule;
}(parameterConstructorBase_1.ConstructorRule));
exports.Rule = Rule;
